# Starter pipeline
- task: TerraformCLI@0
  inputs:
    command: 'apply'
    environmentServiceName: 'new-test-sp'
    providerAzureRmSubscriptionId: '68bd44f5-fac6-4430-a0d0-93a3632c3af9'
    runAzLogin: true
    allowTelemetryCollection: false
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, Pipelines!
  displayName: 'Getting Started'

- task: TerraformCLI@0
  displayName: Terraform Init
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform (Infrastructure as Code)'
    backendType: 'azurerm'
    backendServiceArm: 'new-test-sp'
    backendAzureRmSubscriptionId: '68bd44f5-fac6-4430-a0d0-93a3632c3af9'
    backendAzureRmResourceGroupName: 'ayanfe'
    backendAzureRmStorageAccountName: 'cs4100320006997e147'
    backendAzureRmContainerName: 'terco'
    allowTelemetryCollection: false

- task: TerraformCLI@0
  displayName: Terraform Plan
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform (Infrastructure as Code)'
    environmentServiceName: 'new-test-sp'
    allowTelemetryCollection: false

- task: TerraformCLI@0
  displayName: Terraform Apply
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform (Infrastructure as Code)'
    commandOptions: '-auto-approve'
    allowTelemetryCollection: false